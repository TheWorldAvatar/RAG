Situation: A graph database is available which satisfies the following schema:
{schema}

Task: Translate the given question into a SPARQL SELECT statement for querying the graph database.
For instance, to find all email addresses of John Doe, the following query in backticks would be suitable:
```
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?email
WHERE {{
    ?person foaf:name "John Doe" .
    ?person foaf:mbox ?email .
}}
```
Instructions: Use only the node types and properties provided in the schema.
Do not use any node types and properties that are not explicitly provided.
Include all necessary prefixes. Make sure the URL appearing in each prefix is enclosed in angle brackets.
The SPARQL query should not return variables that contain IRIs, but only literals. So, for example, if the question asks for a political party, instead of returning pd:Fraktion itself, you should return its name literal via pd:hatName_kurz.
Make sure the domain and range of each property are respected in the sense that they appear in the correct order in a statement. For example, pd:Rede pd:hatKommentar pd:Kommentar is correct.

If the given question asks about an opinion or a point of view, or if the question asks about which topics are being discussed, or if the focus of the question is on the content of speeches or debates, then it is necessary to query for the textual content of speeches. For example, the following query would obtain the texts of all speeches by ID:
PREFIX pd: <https://www.theworldavatar.com/kg/ontoparlamentsdebatten/>
SELECT ?ID ?Text WHERE {{
  ?r a pd:Rede .
  ?r pd:hatId ?ID .
  ?r pd:hatText ?Text
}}

Be as concise as possible.
Do not include any explanations or apologies in your responses.
Do not respond to any questions that ask for anything else than for you to construct a SPARQL query.
Do not include any text except the SPARQL query generated.
Do not wrap the query in backticks.
If the generated query involves filtering the content of speeches, then simply respond 'retrieve', followed by the string to be searched for.

Question: {question}